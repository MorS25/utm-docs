info:
  version: "v1"
  title: UTM DMP TCL4 Flight Data Specification
  description: Data model for flight data submission. 
  contact:
    name: 'NASA Ames Research Center, Aviation Systems Division'
    url: 'https://utmregistry.arc.nasa.gov/'
    email: joseph.rios@nasa.gov
  license:
    name: NASA Open Source Agreement
    url: 'https://ti.arc.nasa.gov/opensource/nosa/'
  termsOfService: >-
    A. No Warranty: THE SUBJECT SOFTWARE IS PROVIDED \"AS IS\" WITHOUT ANY
    WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING,
    BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
    SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE
    SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF
    PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN
    ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR
    RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR
    ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE. FURTHER,
    GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING
    THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES
    IT \"AS IS.\"


    B. Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
    AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS
    WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT''S USE OF THE SUBJECT SOFTWARE
    RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING
    FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING
    FROM, RECIPIENT''S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY
    AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
    SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY
    LAW. RECIPIENT''S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE,
    UNILATERAL TERMINATION OF THIS AGREEMENT.

definitions:
  metaData:
    type: object
    required: ['test_card','run','call_sign','uvin','gufi','submitTime','ussName']
    properties:
      uvin:
        $ref: '#/definitions/UUID'
      gufi:
        description: >-
          GUFI of the operation that is the source of these data. Note that this
          GUFI is repeated in the Position model, so they must match.  In addition
          this GUFI will map to operational data in the UTM data stores.  Thus
          the values for call_sign, test_card, test_run must match the metadata
          supplied with that Operation's metadata.  Mismatches will cause the
          data submission to be rejected.
        type: string
        format: uuid
        maxLength: 36
        minLength: 36
        pattern: "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
        example: "00000000-0000-4444-8888-FEEDDEADBEEF"
      submitTime:
        $ref: '#/definitions/timestamp'
      ussName:
        type: string
        description: This is a unique string that identifies the USS that is supporting this operation.  It is the same identifier used in the basic authentication mechanism required to obtain a token from FIMS (Flight Information Management System).  It is also the subject claim that identifies the principal that is the subject of the JWT.
      test_card:
        description: >-
          The official test card bstring.  The test cards or test card identifiers will be provided by NASA.  They will be unique across the UTM TCL4 campaign.  
        type: string
        maxLength: 100
        example: "NVS1C3"
      run:
        description: >-
          The run of this test card.  Many test cards will be run once, but
          many may have several runs for various reasons, planned and unplanned.
        type: integer
        format: int32
        example: 3
      call_sign:
        description: >-
          Within the test card, this operation should have a unique
          call_sign.  This value must be provided here.
        type: string
        maxLength: 100
        example: "Tootsie88"

      source:
        type: string
        description: >-
          Hardware-in-the-loop (HWITL) flights refer to ground or airborne
          flights. Software-in-the loop (SWITL) flights would be used to tag
          flights do not use a physical vehicle, whether or not there is a
          full-featured simulation involved.
        enum:
          - HWITL
          - SWITL
      location:
        type: string
        description: >-
          Name of the testing location, such as NV, Moffett, Crows
          Landing, etc.  The supplier of the metadata should use a constant
          value for this field when the same location is used mulitple times
          across data submissions. E.g. "AMES" should always be "AMES" and not
          "ames" or "Ames" or "NASA Ames" at other various times.
        minLength: 1
        maxLength: 100
      setting:
        type: string
        description: >-
          Test setting. Note that a LAB setting may involve HWITL source and
          FIELD settings may involve SWITL sources.  LAB settings may have
          GROUND or FLIGHT tests, same with FIELD settings.  This is some
          insight into the reason for these various fields.
        enum:
          - LAB
          - FIELD
      free_text:
        type: string
        description: >-
          Free text may be included with the original submission and/or added
          by a data_quality_engineer.  In the latter case, all previous
          free_text should be preserved, i.e. the data_quality_engineer should
          only append to the free_text field.
        maxLength: 3000
      data_collection: 
        description: >-
          If true these data are intended for Data Collection. Essentially
          stating if particular data should be ignored during analysis. This
          may be modified after submission in the case that there was an issue
          during execution of the test/experiment that would invalidate the
          data that were collected.
        type: boolean
      event_id:
        type: array
        description: >-
          An array of string tags indicating which event(s) this operation is associated.
          Will be used to select a set of rules for validation.
        items:
          type: string
          minLength: 1
          maxLength: 100
      test_identifiers:
        description: >-
          Specific tests ids supported by these data. These ids should map to
          specific tests as outlined in the overall event description. As
          an example, Event "TCL3_Demonstration" at a test site may have a
          test_card called "CARD_44". The operation associated with this
          metadata block may support "DAT2", "CNS1", and "CON4" specific tests.
          If any one of those elements are missing (event_id, test_card,
          test_identifiers), then data analysis may become difficult if not
          impossible.
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 30
        maxItems: 20
        minItems: 1
        uniqueItems: true          
        
  timestamp:
    description: >-
      Timestamps MUST follow the guidance set forth in RFC3339.
      This RFC defines a profile for ISO8601 forcused on interoperability of Internet
      based systems.  This profile makes certain design decisions based on
      reducing rarely used options, elimination of redundant information, and
      overall simplicity.
      From these goals and insight from building interoperable systems,
      RFC3339 provides a grammar for timestamps.  Please see
      https://tools.ietf.org/html/rfc3339#section-5.6
      for that grammer and the sections preceding that grammar for more
      detailed discussion.
      For UTM, we have attempted to reduce the grammar to a regular expression,
      but this does not take into account all rules.  For example, a valid
      timestamp should not allow 30 days in February, but this is not in the
      regular expression.  Likewise, leap years are not captured in the
      regular expression.  Thus it is possible for a timestamp to satisfy this
      RE, but still not be valid and, thus, be rejected by some components of
      UTM.
      Note that this UTM format specifies millisecond precision for all
      time stamps.  This is why the min and max length are fixed at 24.
      Note that this UTM format specifies UTC time indicated by a trailing 'Z'.
      Note that this UTM format specifies date and time separation with a 'T'.
    type: "string"
    format: "iso8601"
    minLength: 24
    maxLength: 24
    pattern: "^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]{3})Z$"
    example: "2015-08-20T14:11:56.118Z"
    
  UUID:
    type: string
    format: uuid
    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    example: 'd7126818-d280-475f-aaee-c16e9c6f04e0'
    maxLength: 36
    minLength: 36
