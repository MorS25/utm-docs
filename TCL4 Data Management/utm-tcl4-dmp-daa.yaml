info:
  version: "v1.0"
  title: UTM DMP TCL4 DAA
  description: Data model for CNS submission.
  contact:
    name: 'NASA Ames Research Center, Aviation Systems Division'
    url: 'https://utmregistry.arc.nasa.gov/'
    email: marcus.johnson@nasa.gov
  license:
    name: NASA Open Source Agreement
    url: 'https://ti.arc.nasa.gov/opensource/nosa/'
  termsOfService: >-
    A. No Warranty: THE SUBJECT SOFTWARE IS PROVIDED \"AS IS\" WITHOUT ANY
    WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING,
    BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
    SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE
    SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF
    PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN
    ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR
    RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR
    ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE. FURTHER,
    GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING
    THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES
    IT \"AS IS.\"


    B. Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
    AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS
    WELL AS ANY PRIOR RECIPIENT. IF RECIPIENT''S USE OF THE SUBJECT SOFTWARE
    RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING
    FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING
    FROM, RECIPIENT''S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY
    AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
    SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY
    LAW. RECIPIENT''S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE,
    UNILATERAL TERMINATION OF THIS AGREEMENT.

swagger: '2.0'

paths:
  '/no-paths':
    put:
      responses:
        '410':
          description: >-
            Gone. Not implemented. Will not be implemented. Path included for
            proper use by automated tooling.  Tools sometimes do not like
            when there are no paths, but domains do not contain paths.

definitions:
  DaaSensor:
    type: object
    required:
      - daaSensor
      - sensorId
      - useOfSensor
      - typeOfSensor
      - probabilityIntruderDetectionPrct
      - targetTrackCapacity
      - updateRateSensor
    properties:
      sensorId:
        $ref: "#/definitions/SensorId"
      useOfSensor:
        description: >-
          Report the use of this sensor.
        type: string
        enum:
          - DETECT_AND_AVOID
          - OBSTACLE_AVOIDANCE
          - COLLISION_AVOIDANCE
      typeOfSensor:
        type: string
        enum:
          - USS_SERVICE
          - DSRC
          - C-2V2X
          - WIFI
          - ADS-B
          - AIRBORNE_RADAR
          - GROUND_RADAR
          - LIDAR
          - ACOUSTIC
          - OPTICAL
          - EO/IR
          - OTHER
      otherSensor:
        description: >-
          If typeOfSensor is supplied as "OTHER" provide a description of the
          type of sensor here.
        type: string
      probabilityIntruderDetectionPrct:
        $ref: "#/definitions/percent"
      targetTrackCapacity:
        $ref: "#/definitions/count"
      updateRateSensor:
        $ref: "#/definitions/hertz"

      sensorMaxHorzRangeData:
        $ref: "#/definitions/feet"
      sensorMinHorzRangeData:
        $ref: "#/definitions/feet"
      maxHorzRcsOfSensor:
        description: >-
          Maximum horizontal detectable Radar Cross Section (RCS) of the sensor
          per manufacturer specification. (ft^2)
        $ref: "#/definitions/squareFoot"
      minHorzRcsOfSensor:
        description: >-
          Minimum horizontal detectable Radar Cross Section (RCS) of the sensor
          per manufacturer specification. (ft^2)
        $ref: "#/definitions/squareFoot"
      horRangeAccuracy:
        description: >-
          Manufacturer provided specification of horizontal range accuracy of the
          sensor: uncertainty of the horizontal range measurement for the sensor.
          Accuracy = how close a measured value is to the actual (true) value
          (e.g. for accuracy +/- 5, write "5"). (ft)
        $ref: "#/definitions/feet"

      sensorMaxVertRange:
        $ref: "#/definitions/feet"
      sensorMinVertRange:
        $ref: "#/definitions/feet"
      maxVertRcsOfSensor:
        description: >-
          Maximum vertical detectable Radar Cross Section (RCS) of the sensor
          per manufacturer specification. (ft^2)
        $ref: "#/definitions/squareFoot"
      minVertRcsOfSensor:
        description: >-
          Minimum vertical detectable Radar Cross Section (RCS) of the sensor
          per manufacturer specification. (ft^2)
        $ref: "#/definitions/squareFoot"
      verRangeAccuracy:
        description: >-
          Manufacturer provided specification of vertical range accuracy of the
          sensor: uncertainty of the vertical range measurement for the sensor.
          Accuracy = how close a measured value is to the actual (true) value
          (e.g. for accuracy +/- 5, write "5"). (ft)
        $ref: "#/definitions/feet"

  DaaSensorBearing:
    required:
      - sensorId
      - azimuthSensorMax
      - azimuthSensorMin
      - daaSensorAzimuthAccuracy
      - elevationSensorMax
      - elevationSensorMin
      - daaSensorAltitudeAccuracy
    properties:
      sensorId:
        $ref: "#/definitions/SensorId"
      azimuthSensorMax:
        $ref: "#/definitions/degrees"
      azimuthSensorMin:
        $ref: "#/definitions/degrees"
      daaSensorAzimuthAccuracy:
        $ref: "#/definitions/degrees"
      elevationSensorMax:
        $ref: "#/definitions/degrees"
      elevationSensorMin:
        $ref: "#/definitions/degrees"
      daaSensorAltitudeAccuracy:
        $ref: "#/definitions/feet"

  DaaSensorV2V:
    description: >-
      A V2V sensor is expected to transmit on at least one frequency.  For each
      frequency that a V2V sensor uses for transmission, provide one instance
      of this model.
    required:
      - sensorId
      - txRadioFrequencyV2V
      - txRadioFrequencyPowerEirpV2V
      - txRadioFrequencyPowerErpV2V
    properties:
      sensorId:
        $ref: "#/definitions/SensorId"
      txRadioFrequencyV2V:
        $ref: "#/definitions/gigaHertz"
      txRadioFrequencyPowerEirpV2V:
        description: >-
          Amount of equivalent isotropic radiated transmit power (EIRP) of radio
          frequency that a transmitter/surveillance sensor produces as its output. (Watts)
        $ref: "#/definitions/watt"
      txRadioFrequencyPowerErpV2V:
        description: >-
          Amount of effective radiated transmit power (ERP) of radio frequency
          that a transmitter/surveillance sensor produces as its output. (Watts)
        $ref: "#/definitions/watt"

  ConflictResolutionConfiguration:
    required:
      - metaData
      - lookAheadTime
      - expectedOperatorResponseTime
      - expectedUASResponseTime
      - expectedCommLatency
      - expectedClimbRateOwnship
      - expectedDescendRateOwnship
      - expectedTurnRateOwnship
      - expectedTimeToHover
      - probabilityFalseAlarmPrct
      - staticObstacleTable
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      lookAheadTime:
        $ref: "#/definitions/seconds"
      expectedOperatorResponseTime:
        $ref: "#/definitions/seconds"
      expectedUASResponseTime:
        $ref: "#/definitions/seconds"
      expectedCommLatency:
        $ref: "#/definitions/seconds"
      expectedClimbRateOwnship:
        $ref: "#/definitions/seconds"
      expectedDescendRateOwnship:
        $ref: "#/definitions/seconds"
      expectedTurnRateOwnship:
        $ref: "#/definitions/seconds"
      expectedTimeToHover:
        $ref: "#/definitions/seconds"
      probabilityFalseAlarmPrct:
        $ref: "#/definitions/percent"

      # staticObstaclePolygonPoint
      # staticObstacleMaxAlt_ft
      # staticObstacleMinAlt_ft
      staticObstacleTable:
        type: array
        items:
          type: object
          properties:
            polygonBoundary:
              $ref: "#/definitions/PolygonBoundary"


  DaaSensorAzimuthAccuracy:
    required:
      - metaData
      - sensorId
      - timestamp
      - daaSensorAzimuthAccuracyRealTime
      - daaSensorAltitudeAccuracyRealTime
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      daaSensorAzimuthAccuracyRealTime:
        $ref: '#/definitions/degrees'
      daaSensorAltitudeAccuracyRealTime:
        $ref: '#/definitions/degrees'

  DaaSensorRangeAccuracy:
    required:
      - metaData
      - sensorId
      - timestamp
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      horRangeAccuracyRealTime:
        $ref: '#/definitions/feet'
      verRangeAccuracyRealTime:
        $ref: '#/definitions/feet'

  DaaSensorV2vData:
    required:
      - metaData
      - sensorId
      - timestamp
      - dataPacketRatioV2v
      - transmissionDelayV2v
      - packetSizeV2v
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      dataPacketRatioV2v:
        $ref: '#/definitions/ratio'
      transmissionDelayV2v:
        $ref: "#/definitions/seconds"
      packetSizeV2v:
        $ref: '#/definitions/kiloBytes'

  DaaSensorNumberOfLostTracks:
    required:
      - metaData
      - sensorId
      - timestamp
      - numberOfLostTracks
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      numberOfLostTracks:
        $ref: '#/definitions/count'

  DaaSensorTimeToTrack:
    description: >-
      Time to Track of DAA sensor: time required to establish a track for the sensor since first detection. Include 3 decimal places of precision.
    required:
      - metaData
      - sensorId
      - firstDetectionTime
      - timeRequiredForTrack
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      firstDetectionTime:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      timeRequiredForTrack:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'

  DaaSensorIntruderAircraftDetection:
    description: >-
      Timestamp,Lat,Lon,Alt of intruder aircraft detected position(s)-DAA (Detect And Avoid).  Include (uvin,gufi) of detected a/c
    required:
      - metaData
      - sensorId
      - timestamp
      - uvin
      - gufi
      - latLonAlt
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      uvin:
        description: >-
          UTM Vehicle Identifier
        type: string
        format: uuid
        maxLength: 36
        minLength: 36
        pattern: "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
        example: "00000000-0000-4444-8888-FEEDDEADBEEF"
      gufi:
        description: >-
          GUFI of the operation that is the source of these data. Note that this
          GUFI is repeated in the Position model, so they must match.  In addition
          this GUFI will map to operational data in the UTM data stores.  Thus
          the values for call_sign, test_card, test_run must match the metadata
          supplied with that Operation's metadata.  Mismatches will cause the
          data submission to be rejected.
        type: string
        format: uuid
        maxLength: 36
        minLength: 36
        pattern: "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
        example: "00000000-0000-4444-8888-FEEDDEADBEEF"
      latLonAlt:
        $ref: '#/definitions/LatLonAlt'

  DaaSensorDynamicObstacle:
    description: >-
      Sensor detection of dynamic obstacle.  At each relevant timestamp, report the polygon that the sensor constructs as an estimate of the dynamic object.  Include an estimate of its height.
    required:
      - metaData
      - sensorId
      - timestamp
      - dynamicObstaclePolygon
      - dynamicObstacleHeight
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      sensorId:
        $ref: "#/definitions/SensorId"
      timestamp:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
      dynamicObstaclePolygon:
        $ref: "#/definitions/LatLonArray"
      dynamicObstacleHeight:
        description: >-
          height in ft
        type: number
        minimum: 0

  DaaConflictResolutionMeasurement:
    description: >-
      Conflict resolution data
    required:
      - metaData
      - conflictGufi
      - conflictUvin
      - typeOfConflictResolution
      - conflictResolutionManeuver
      - eventTimesTable
    properties:
      metaData:
        $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/metaData'
      typeOfConflictResolution:
        type: integer
        enum: [0,1,2,3]
      conflictResolutionManeuver:
        type: integer
        enum: [0,1,2,3,4,5,6]
      eventTimesTable:
        type: array
        items:
          type: object
          required: [eventType,timeStamp,severityOfAlert,directionOfAlertResolution]
          properties:
            eventType:
              type: string
              enum: [timeAtEncounterInit,timeAtEncounterEnd,timeAtConflictAlert,timeAtConflictResManeuverInit,timeAtConflictResManeuverComplt,timeAtClearOfConflict,ussDaaAlertReceived,onboardDaaAlertIssued,groundDaaAlertIssued,caAlertIssued,ussCaAlertReceived,oaAlertIssued,ussOaAlertReceived]
            timeStamp:
                $ref: 'https://raw.githubusercontent.com/nasa/utm-docs/master/TCL4%20Data%20Management/utm-tcl4-dmp-common.yaml#/definitions/timestamp'
            severityOfAlert:
              type: integer
              enum: [-1,0,1]
            directionOfAlertResolution:
              type: integer
              enum: [-1,0,1]

# supporting definitions
  SensorId:
    description: >-
      Identifier for this sensor instance.  Assigned by data originator and
      held constant for a given sensor to uniquely identify it across data
      submissions.
    type: string
    format: uuid
    maxLength: 36
    minLength: 36
    pattern: "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
    example: "00000000-0000-4444-8888-FEEDDEADBEEF"

  seconds:
    type: number
    format: integer

  degrees:
    type: number
    format: float

  feet:
    type: number
    format: float

  squareFoot:
    type: number
    format: float

  hertz:
    type: number
    format: float

  gigaHertz:
    type: number
    format: float

  percent:
    type: number
    format: float

  count:
    type: number
    format: integer

  watt:
    type: number
    format: float

  ratio:
    type: number
    format: float

  kiloBytes:
    type: number
    format: float

  PolygonBoundary:
    type: object
    required: [min,max,polygonPoints]
    properties:
      min:
        type: number
        format: float
      max:
        type: number
        format: float
      polygonPoints:
        type: array
        items:
          $ref: "#/definitions/LatLon"
  LatLon:
    type: object
    required: [lat,lon]
    properties:
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double
  LatLonAlt:
    description: >-
      Latitude, Longitude, Altitude should have precision of 7 or more digits. position WGS84 altitude. (ft)
    type: object
    required: ['lat','lon','alt']
    properties:
      lat:
        $ref: '#/definitions/Latitude'
      lon:
        $ref: '#/definitions/Longitude'
      alt:
       $ref: '#/definitions/Altitude'
  Latitude:
    description: >-
      The numeric value of the latitude. Note that min and max values are added as a sanity check.
    type: number
    format: double
    minimum: -90.0
    maximum: 90.0
  Longitude:
    description: >-
      The numeric value of the longitude. Note that min and max values are added as a sanity check.
    type: number
    format: double
    minimum: -180.0
    maximum: 180.0
  Altitude:
    description: >-
      The numeric value of the altitude. Note that min and max values are added as a sanity check. unit in feet.
    type: number
    format: double
    minimum: -8000.0
    exclusiveMinimum: false
    maximum: 100000.0
    exclusiveMaximum: false
  LatLonAltArray:
    description: >-
      Array of (lat,lon,alt) tuples.

      If used to describe a Polygon, the first point and the last point must
      be equal.
    type: array
    items:
      $ref: '#/definitions/LatLonAlt'
    minItems: 1
  LatLonArray:
    description: >-
      Array of (lat,lon) tuples.

      If used to describe a Polygon, the first point and the last point must
      be equal.
    type: array
    items:
      $ref: '#/definitions/LatLon'
    minItems: 1
